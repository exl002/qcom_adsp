#===============================================================================
#
# IDL Libs
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2009-2014 by Qualcomm Technologies, Inc.  All Rights Reserved
# Qualcomm Technologies Proprietary and Confidential
#
#-------------------------------------------------------------------------------
#
#  $Header:  $
#  $DateTime:  $
#  $Author:  $
#  $Change:  $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 06/02/2014  tc     Added Tilt Detector
# 02/28/2014  MW     Added SENSORS_DD_DEV_FLAG for HD22
# 02/13/2014  tc     Added support for SMGR Restricted API
# 12/14/2013  pk     Added SAM Algorithm Attributes Query support
# 10/14/2013  ps     added support for oem_1 algo
# 06/25/2013  ps     update require method for Public APIs
# 06/05/2013  pd     Added Significant Motion Detection service support
# 06/05/2013  tc     Added support for Game Rotation Vector
# 03/18/2013 gju     Remove debug internal service; add file service.
# 01/12/2013  asj    Added modem scenario service support
# 12/02/2012  ag     Add multi PD support
# 02/07/2012  jh     Added support for gestures and updated time service
# 11/22/2011  jh     Added support for orientation
# 11/18/2011  sc     Added time service.
# 11/08/2011  sc     Added support for sensor threshold service
# 08/18/2011 jtl     Added internal debug service.
# 04/27/2011  jh     Added support for SAM gravity, quaternion and SMGR internal
#                    APIs
# 04/21/2011  sj     Added support Sensor Power Manager service
# 04/14/2011  dc     Updates for Blast OS.
# 12/22/2010  ad     Add IDL generated .c files for FNS and BTE algos 
# 12/22/2010  pg     Update for accessing UCOS header files from DALSYS. 
# 11/08/2010  ad     Adding IDL generated .c files for DSPS DIAG service
# 10/08/2010  jh     Adding IDL generated .c files for SAM
# 09/24/2010  sj     Added sns_debug_interface for compilation
#===============================================================================
Import('env')
env = env.Clone()

#-------------------------------------------------------------------------------
# Source PATH
#-------------------------------------------------------------------------------
SRCPATH = "${BUILD_ROOT}/Sensors/common/idl/src"

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-------------------------------------------------------------------------------
# External depends outside module
#-------------------------------------------------------------------------------
CBSP_API = [
   'DAL',
   'MPROC',
]

env.RequirePublicApi(CBSP_API, area='core')

#-------------------------------------------------------------------------------
# Internal depends within module
#-------------------------------------------------------------------------------
if env.has_key('SNS_BLAST'):
  env.Append(CPPPATH = [
     "${BUILD_ROOT}/Sensors/common/inc",
     "${BUILD_ROOT}/Sensors/api",
  ])
else:
  env.Append(CPPPATH = [
     "${BUILD_ROOT}/Sensors/common/inc",
     "${BUILD_ROOT}/Sensors/common/idl/inc",
     "${BUILD_ROOT}/Sensors/api",
  ])

#-------------------------------------------------------------------------------
# Sources, libraries
#-------------------------------------------------------------------------------
IDL_DSPS_SOURCES = [
      '${BUILDPATH}/sns_common_v01.c',	  
      '${BUILDPATH}/sns_smgr_api_v01.c',
      '${BUILDPATH}/sns_debug_interface_v01.c',
      '${BUILDPATH}/sns_sam_qmd_v01.c',
      '${BUILDPATH}/sns_sam_amd_v01.c',
      '${BUILDPATH}/sns_sam_vmd_v01.c',
      '${BUILDPATH}/sns_sam_rmd_v01.c',
      '${BUILDPATH}/sns_diag_dsps_v01.c',
      '${BUILDPATH}/sns_reg_api_v01.c',
      '${BUILDPATH}/sns_reg_api_v02.c',
      '${BUILDPATH}/sns_sam_fns_v01.c',
      '${BUILDPATH}/sns_sam_bte_v01.c',
      '${BUILDPATH}/sns_pm_api_v01.c',
      '${BUILDPATH}/sns_sam_gravity_vector_v01.c',
      '${BUILDPATH}/sns_sam_quaternion_v01.c',
      '${BUILDPATH}/sns_smgr_internal_api_v01.c',
      '${BUILDPATH}/sns_sam_filtered_mag_v01.c',
      '${BUILDPATH}/sns_sam_orientation_v01.c',
      '${BUILDPATH}/sns_sam_rotation_vector_v01.c',
      '${BUILDPATH}/sns_sam_mag_cal_v01.c',
      '${BUILDPATH}/sns_sam_sensor_thresh_v01.c',
      '${BUILDPATH}/sns_time_api_v01.c',
      '${BUILDPATH}/sns_time_api_v02.c',
      '${BUILDPATH}/sns_sam_basic_gestures_v01.c',
      '${BUILDPATH}/sns_sam_facing_v01.c',
      '${BUILDPATH}/sns_sam_gyro_tap2_v01.c',
      '${BUILDPATH}/sns_sam_integ_angle_v01.c',
      '${BUILDPATH}/sns_sam_tap_v01.c',
      '${BUILDPATH}/sns_sam_gyrobuf_v01.c',
      '${BUILDPATH}/sns_sam_gyroint_v01.c',
      '${BUILDPATH}/sns_sam_ped_v01.c',
      '${BUILDPATH}/sns_sam_pam_v01.c',
      '${BUILDPATH}/sns_sam_modem_scn_v01.c',
      '${BUILDPATH}/sns_file_internal_v01.c',
      '${BUILDPATH}/sns_sam_cmc_v01.c',
      '${BUILDPATH}/sns_sam_distance_bound_v01.c',
      '${BUILDPATH}/sns_sam_smd_v01.c',
      '${BUILDPATH}/sns_sam_game_rotation_vector_v01.c',
      '${BUILDPATH}/sns_oem_1_v01.c',
      '${BUILDPATH}/sns_sam_common_v01.c',
      '${BUILDPATH}/sns_smgr_restricted_api_v01.c',
      '${BUILDPATH}/sns_sam_tilt_detector_v01.c'
   ]
   
#-------------------------------------------------------------------------------
# Add Libraries to image
#-------------------------------------------------------------------------------
if 'SENSORS_DD_DEV_FLAG' in env:
   # Sources that should not be shared
   IDL_CLEAN_SOURCES = env.FindFiles(['*.c'], '${BUILD_ROOT}/Sensors/common/idl/src')
   IDL_CLEAN_SOURCES += env.FindFiles(['*.h'], '${BUILD_ROOT}/Sensors/common/idl/inc')
   IDL_CLEAN_SOURCES += env.FindFiles(['*.idl'], '${BUILD_ROOT}/Sensors/common/idl/idl')
	
   # Add as binary library
   if env.has_key('SNS_BLAST'):
      idl_dsps_lib = env.AddBinaryLibrary(['CBSP_QDSP6_SW_IMAGE', 'QDSP6_SW_IMAGE', 'CBSP_QDSP6_SW_IMAGE', 'CORE_QDSP6_SENSOR_SW'],
      "${BUILDPATH}/IDL_DSPS", IDL_DSPS_SOURCES)
		
      # Clean sources
      env.CleanPack(['CBSP_QDSP6_SW_IMAGE', 'QDSP6_SW_IMAGE', 'CBSP_QDSP6_SW_IMAGE', 'CORE_QDSP6_SENSOR_SW'], 
      IDL_CLEAN_SOURCES)
   else:
      idl_dsps_lib = env.AddBinaryLibrary(['CBSP_QDSP6_SW_IMAGE', 'CORE_QDSP6_SENSOR_SW'],
      "${BUILDPATH}/IDL_DSPS", IDL_DSPS_SOURCES)
		
      # Clean sources
      env.CleanPack(['CBSP_QDSP6_SW_IMAGE', 'CORE_QDSP6_SENSOR_SW'], 
      IDL_CLEAN_SOURCES)

else:
   idl_dsps_lib = env.Library('${BUILDPATH}/IDL_DSPS', IDL_DSPS_SOURCES)
   if env.has_key('SNS_BLAST'):
      env.AddLibsToImage(
      ['CBSP_QDSP6_SW_IMAGE', 'QDSP6_SW_IMAGE', 'CBSP_QDSP6_SW_IMAGE', 'CORE_QDSP6_SENSOR_SW'],
      idl_dsps_lib)
   else:
      env.AddLibsToImage(
      ['CBSP_QDSP6_SW_IMAGE', 'CORE_QDSP6_SENSOR_SW'],
      idl_dsps_lib)
