#===============================================================================
#
# SAM common framework library
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2011-2014 by Qualcomm Technologies, Inc.  All Rights Reserved
# Qualcomm Technologies Proprietary and Confidential
#
#-------------------------------------------------------------------------------
#
#  $Header:  $
#  $DateTime:  $
#  $Author:  $
#  $Change:  $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when        who    what, where, why
# --------    ---    ---------------------------------------------------------
# 2014-02-28  MW     Added SENSORS_DD_DEV_FLAG for HD22
# 2013-10-20  ad     update compiler optimization
# 2013-06-25  ps     update require method for Public APIs
# 2013-03-05  ag     Add test client to standlaone builds
# 2013-02-20  sc     Added modem service API path
# 2012-12-07  gju    Add new SAM file and dependency
# 2012-12-02  ag     Add multi PD support
# 2012-11-08  sc     Removed qmi ping client from build
# 2012-07-29  ag     Porting from SMR to QMI
# 2011-07-18  ad     refactor SAM for memory optimization
# 2011-04-26  ad     added internal service dependency
# 2011-04-14  dc     Updates for Blast OS.
# 2011-01-26  jh     Update for accessing UCOS header files from DALSYS
# 2011-01-20  ad     initial version
#===============================================================================
Import('env')
env = env.Clone()

#-------------------------------------------------------------------------------
# Source PATH
#-------------------------------------------------------------------------------
SRCPATH = "${BUILD_ROOT}/Sensors/common/sam/framework/src"

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

env.Append(CCFLAGS = " -O2 ")

#-------------------------------------------------------------------------------
# External depends within module
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# External depends outside module
#-------------------------------------------------------------------------------
CBSP_API = [
   'BOOT',
   'BUSES',
   'DAL',
   'DEBUGTOOLS',
   'HAL',
   'MPROC',
   'SERVICES',
   'STORAGE',
   'SYSTEMDRIVERS',
   'WIREDCONNECTIVITY',
   'SECUREMSM',
   # needs to be last also contains wrong comdef.h
   'KERNEL',
]

env.RequirePublicApi(CBSP_API, area='core')
env.RequireRestrictedApi(CBSP_API)

#-------------------------------------------------------------------------------
# Internal depends within module
#-------------------------------------------------------------------------------
SENSORS_API = [
   'SNS_SMR',
   'SNS_MEMMGR',
   'SNS_EVMGR',
   'SNS_COMMON',
   'SNS_DEBUG_DSPS'
   'SNS_INT_SRVC'
]

env.RequireRestrictedApi(SENSORS_API)

#-------------------------------------------------------------------------------
# Headers required by SNA OSA
#-------------------------------------------------------------------------------
DAL_UCOS_API = [
   'DAL',
]
env.RequireRestrictedApi(DAL_UCOS_API)
env.RequirePublicApi(DAL_UCOS_API)

if env.has_key('SNS_BLAST'):
  env.Append(CPPPATH = [
     "${BUILD_ROOT}/core/api/sensors",
     "${BUILD_ROOT}/Sensors/common/inc",
     "${BUILD_ROOT}/Sensors/common/idl/inc",
     "${BUILD_ROOT}/Sensors/common/smr/inc",
     "${BUILD_ROOT}/Sensors/common/util/memmgr/inc",
     "${BUILD_ROOT}/Sensors/common/util/queue/inc",
     "${BUILD_ROOT}/Sensors/common/util/mathtools/inc",
     "${BUILD_ROOT}/Sensors/common/util/circbuffer/inc",
     "${BUILD_ROOT}/Sensors/common/sam/framework/inc/",
     "${BUILD_ROOT}/Sensors/common/sam/algo/common/inc",
     "${BUILD_ROOT}/Sensors/apps/common/sns_debug/inc",
     "${BUILD_ROOT}/Sensors/modem/blast/inc",   
  ])
else:
  env.Append(CPPPATH = [
     "${BUILD_ROOT}/Sensors/api",
     "${BUILD_ROOT}/Sensors/common/inc",
     "${BUILD_ROOT}/Sensors/common/idl/inc",
     "${BUILD_ROOT}/Sensors/common/smr/inc",
     "${BUILD_ROOT}/Sensors/common/smr/src",
     "${BUILD_ROOT}/Sensors/common/util/memmgr/inc",
     "${BUILD_ROOT}/Sensors/common/util/queue/inc",
     "${BUILD_ROOT}/Sensors/common/util/mathtools/inc",
     "${BUILD_ROOT}/Sensors/common/util/circbuffer/inc",
     "${BUILD_ROOT}/Sensors/common/sam/framework/inc/",
     "${BUILD_ROOT}/Sensors/common/sam/algo/common/inc",
     "${BUILD_ROOT}/Sensors/debug/inc",
     "${BUILD_ROOT}/qmimsgs/rfrpe/api",
     "${BUILD_ROOT}/qmimsgs/common/api",
  ])  

#--TEMP
env.Append(CPPPATH = [
   "${BUILD_ROOT}/core/mproc/qmi/src/qcci",
   "${BUILD_ROOT}/core/mproc/qmi/src/qcsi",
   "${BUILD_ROOT}/core/mproc/qmi/src/common",
   ])  

#-------------------------------------------------------------------------------
# Sources, libraries
#-------------------------------------------------------------------------------
FRAMEWORK_SOURCES = [
      '${BUILDPATH}/sns_sam.c',
      '${BUILDPATH}/sns_sam_ext.c',
      '${BUILDPATH}/sns_sam_mr.c',
   ]

FRAMEWORK_TEST_SOURCES = [
      '${BUILDPATH}/sam_qmi_ping_clnt.c',
   ]

if env.has_key('ADSP_STANDALONE'):
  FRAMEWORK_SOURCES += FRAMEWORK_TEST_SOURCES

#-------------------------------------------------------------------------------
# Add Libraries to image
#-------------------------------------------------------------------------------
if 'SENSORS_DD_DEV_FLAG' in env:
   # Sources that should not be shared
   SAM_FW_CLEAN_SOURCES = env.FindFiles(['*.c'], '${BUILD_ROOT}/Sensors/common/sam/framework/src')
   SAM_FW_CLEAN_SOURCES += env.FindFiles(['*.h'], '${BUILD_ROOT}/Sensors/common/sam/framework/inc')
	
   # Add as binary library
   if env.has_key('SNS_BLAST'):
      samfw_lib = env.AddBinaryLibrary(['CBSP_QDSP6_SW_IMAGE', 'QDSP6_SW_IMAGE', 'CBSP_QDSP6_SW_IMAGE', 'CORE_QDSP6_SENSOR_SW'],
      "${BUILDPATH}/sam_fw_comm", FRAMEWORK_SOURCES)
		
      # Clean sources
      env.CleanPack(['CBSP_QDSP6_SW_IMAGE', 'QDSP6_SW_IMAGE', 'CBSP_QDSP6_SW_IMAGE', 'CORE_QDSP6_SENSOR_SW'], 
      SAM_FW_CLEAN_SOURCES)
   else:
      samfw_lib = env.AddBinaryLibrary(['CBSP_QDSP6_SW_IMAGE', 'CORE_QDSP6_SENSOR_SW'],
      "${BUILDPATH}/sam_fw_comm", FRAMEWORK_SOURCES)
		
      # Clean sources
      env.CleanPack(['CBSP_QDSP6_SW_IMAGE', 'CORE_QDSP6_SENSOR_SW'], 
      SAM_FW_CLEAN_SOURCES)
else:
   samfw_lib = env.Library('${BUILDPATH}/sam_fw_comm', FRAMEWORK_SOURCES)
   if env.has_key('SNS_BLAST'):
      env.AddLibsToImage(
      ['CBSP_QDSP6_SW_IMAGE', 'QDSP6_SW_IMAGE', 'CBSP_QDSP6_SW_IMAGE', 'CORE_QDSP6_SENSOR_SW'],
      samfw_lib)
   else:
      env.AddLibsToImage(
      ['CBSP_QDSP6_SW_IMAGE', 'CORE_QDSP6_SENSOR_SW'],
      samfw_lib)
