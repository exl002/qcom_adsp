#===============================================================================
#
# Queue Libs
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2009-2014 by Qualcomm Technologies, Inc.  All Rights Reserved
# Qualcomm Technologies Proprietary and Confidential
#-------------------------------------------------------------------------------
#
#  $Header:  $
#  $DateTime:  $
#  $Author:  $
#  $Change:  $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 02/28/2014  MW     Added SENSORS_DD_DEV_FLAG for HD22
# 06/25/2013  ps     update require method for Public APIs
# 12/02/2012  ag     Add multi PD support
# 04/14/2011  dc     Updates for blast
# 12/22/2010  pg     Update for accessing UCOS header files from DALSYS. 
#
#===============================================================================
Import('env')
env = env.Clone()

#-------------------------------------------------------------------------------
# Source PATH
#-------------------------------------------------------------------------------
SRCPATH = "${BUILD_ROOT}/Sensors/common/util/queue/src"

#if not env.SubstPathExists(SRCPATH):
#   # Legay Path
#   SRCPATH = "${BUILD_ROOT}/sensors/dsps"

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-------------------------------------------------------------------------------
# Internal depends within CoreBSP
#-------------------------------------------------------------------------------
CBSP_API = [
   'DAL',
   'DEBUGTOOLS',
   'HAL',
   'HWENGINES',
   'IODEVICES',
   'MPROC',
   'SYSTEMDRIVERS',
   'HWIO',
   'HWIO_API',
   'SERVICES',
    # needs to be last also contains wrong comdef.h
   'KERNEL',
]

env.RequirePublicApi(CBSP_API, area='core')

env.UsesInc([
   "${HWIO}",
   "${HWIO_API}",
])

if env.has_key('SNS_BLAST'):
    env.Append(CPPPATH = [
        "${BUILD_ROOT}/Sensors/common/inc",
        "${BUILD_ROOT}/Sensors/common/util/queue/inc",
        "${BUILD_ROOT}/core/api/sensors",
    ])
else:
    env.Append(CPPPATH = [
        "${BUILD_ROOT}/Sensors/common/inc",
        "${BUILD_ROOT}/Sensors/common/util/queue/inc",
        "${BUILD_ROOT}/Sensors/api",
    ])

#-------------------------------------------------------------------------------
# Sources, libraries
#-------------------------------------------------------------------------------
QUEUE_SOURCES = [
    '${BUILDPATH}/sns_queue.c',
]   

#-------------------------------------------------------------------------------
# Add Libraries to image
#-------------------------------------------------------------------------------
if 'SENSORS_DD_DEV_FLAG' in env:
    # Sources that should not be shared
    Q_CLEAN_SOURCES = env.FindFiles(['*.c'], '${BUILD_ROOT}/Sensors/common/util/queue/src')
    Q_CLEAN_SOURCES += env.FindFiles(['*.h'], '${BUILD_ROOT}/Sensors/common/util/queue/inc')
	
    # Add binary library
    if env.has_key('SNS_BLAST'):
        queue_lib = env.AddBinaryLibrary(['CBSP_QDSP6_SW_IMAGE', 'QDSP6_SW_IMAGE', 'CBSP_QDSP6_SW_IMAGE', 
        'CORE_QDSP6_SENSOR_SW'],
        "${BUILDPATH}/QUEUE", QUEUE_SOURCES)
		
        # Clean sources
        env.CleanPack(['CBSP_QDSP6_SW_IMAGE', 'QDSP6_SW_IMAGE', 'CBSP_QDSP6_SW_IMAGE', 
        'CORE_QDSP6_SENSOR_SW'], Q_CLEAN_SOURCES)
		
    else:
        queue_lib = env.AddBinaryLibrary(['CBSP_QDSP6_SW_IMAGE', 'CORE_QDSP6_SENSOR_SW'],
        "${BUILDPATH}/QUEUE", QUEUE_SOURCES)
		
        # Clean sources
        env.CleanPack(['CBSP_QDSP6_SW_IMAGE', 'CORE_QDSP6_SENSOR_SW'], Q_CLEAN_SOURCES)
else:
    queue_lib = env.Library('${BUILDPATH}/QUEUE', QUEUE_SOURCES)
    if env.has_key('SNS_BLAST'):
        env.AddLibsToImage(
            ['CBSP_QDSP6_SW_IMAGE', 'QDSP6_SW_IMAGE', 'CBSP_QDSP6_SW_IMAGE', 'CORE_QDSP6_SENSOR_SW'],
            queue_lib)
    else:
        env.AddLibsToImage(
            ['CBSP_QDSP6_SW_IMAGE', 'CORE_QDSP6_SENSOR_SW'],
            queue_lib)
