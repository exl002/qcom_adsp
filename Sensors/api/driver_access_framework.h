#ifndef DRIVER_ACCESS_FRAMEWORK_H_
#define DRIVER_ACCESS_FRAMEWORK_H_

/*============================================================================*/
/**
  @file run_time_tuning.h


*/

/*============================================================================
  Copyright (c) 2014 Qualcomm Technologies, Inc.  All Rights Reserved
  Qualcomm Technologies Proprietary and Confidential.
  ============================================================================*/
/*============================================================================
EDIT HISTORY FOR MODULE

This section contains comments describing changes made to the module.
Notice that changes are listed in reverse chronological order. Please
use ISO format for dates.

$Header: //components/rel/ssc.adsp/2.4.1/adsp_proc/Sensors/api/driver_access_framework.h#2 $
$DateTime: 2014/05/28 12:36:49 $

when       who    what, where, why
---------- --- -----------------------------------------------------------
2014-05-13 tc  Added SNS_DAF_OEM_MESSAGE_BASE 
2014-02-13 tc  Initial revision

============================================================================*/

/*============================================================================
  INCLUDE FILES
  ============================================================================*/



/*============================================================================
  Preprocessor Definitions and Constants
============================================================================*/


/*============================================================================
   Type Declarations
============================================================================*/

/**
 * Defines the errors used in the sensor1 API.
 *
 * !NOTE: THE ORDERING IN THIS ENUM MUST NOT BE CHANGED!
 *
 * If you wish to reserve a message id, please contact the Qualcomm Sensors team
 */
typedef enum sns_daf_msg_e
{

  SNS_DAF_NO_MSG = 0,                                  // No message, request, response, or indication.

  SNS_DAF_BMA2X2_TUNE_DOUBLETAP_V01 = 1,
  /**< Tunes Double-Tap for the BMA2X2 device */

  SNS_DAF_GENERAL_WHO_AM_I_V01 = 2,
  /**< Identifies the device by reading the "WHO AM I" register
       This is a general message that all drivers should support. */

  SNS_DAF_GENERAL_ECHO_V01 = 3,
  /**< Sends an arbitrary message payload to a driver and expects a response
       with the same message payload.
       This is a general message that all drivers should support. */

  SNS_DAF_GENERAL_REVERB_START_V01 = 4,
  /**< Sends an arbitrary message payload to a driver and expects a response
       to acknowledge the request along with a number of indications with the
       same message payload.
       This is a general message that all drivers should support. */

  SNS_DAF_GENERAL_REVERB_IND_V01 = 5,
  /**< The indication generated by a reverb request. */

  SNS_DAF_GENERAL_REVERB_STOP_V01 = 6,
  /**< Stops a previous "REVERB_START" request. If there is no "REVERB_START"
       request to stop, then this message will do nothing.
       This is a general message that all drivers should support. */

  SNS_DAF_OEM_MESSAGE_BASE = 100000
  /**< All OEM-defined messages MUST START AFTER this value (i.e. 100001 and +).
       All other messages values less than this value are reserved. */

} sns_daf_msg_e;


/**
 * BMA2X2 Double-Tap Tuning Request v01
 *
 * Defines the request structure for the SNS_DAF_BMA2X2_TUNE_DOUBLETAP_V01 message
 *
 * Note: This is an "all-or-nothing" type message. All fields MUST CONTAIN A
 *       VALUE! Furthermore, if there is a failure in one field, the ENTIRE
 *       message fails.
 */
typedef PACK(struct) sns_daf_bma2x2_tune_doubletap_req_v01
{
  uint8_t tap_th;
  /**< Tap Threshold
   *   Definition: the slope threshold for detecting a tap event
   *   Valid Values: 0 to 31 - the real-world value (in mg) depends on the
   *                           range setting
   */
  uint8_t tap_shock;
  /**< Tap Shock
   *   Definition: the duration in which any slope exceeding the threshold
   *               after the first tap event is ignored
   *   Valid Values: 0 - 50 ms
   *                 1 - 75 ms
   */
  uint8_t tap_quiet;
  /**< Tap Quiet
   *   Definition: the duration in which no slope exceeding the threshold
   *               (after the tap shock duration) may occur, otherwise the tap
   *               event is canceled.
   *   Valid Values: 0 - 30 ms
   *                 1 - 20 ms
   */
  uint8_t tap_dur;
  /**< Tap Duration
   *   Definition: the duration in which a second tap event must occur after
   *               detection of the first tap event
   *   Valid Values: 0 - 50 ms
   *                 1 - 100 ms
   *                 2 - 150 ms
   *                 3 - 200 ms
   *                 4 - 250 ms
   *                 5 - 375 ms
   *                 6 - 500 ms
   *                 7 - 700 ms
   */
} sns_daf_bma2x2_tune_doubletap_req_v01;

/**
 * BMA2X2 Double-Tap Tuning Request v01 Maximums and Minimums (inclusive)
 */
#define SNS_DAF_BMA2X2_TUNE_DOUBLETAP_REQ_V01_TAP_TH_MAX     31
#define SNS_DAF_BMA2X2_TUNE_DOUBLETAP_REQ_V01_TAP_TH_MIN     0
#define SNS_DAF_BMA2X2_TUNE_DOUBLETAP_REQ_V01_TAP_SHOCK_MAX  1
#define SNS_DAF_BMA2X2_TUNE_DOUBLETAP_REQ_V01_TAP_SHOCK_MIN  0
#define SNS_DAF_BMA2X2_TUNE_DOUBLETAP_REQ_V01_TAP_QUIET_MAX  1
#define SNS_DAF_BMA2X2_TUNE_DOUBLETAP_REQ_V01_TAP_QUIET_MIN  0
#define SNS_DAF_BMA2X2_TUNE_DOUBLETAP_REQ_V01_TAP_DUR_MAX    7
#define SNS_DAF_BMA2X2_TUNE_DOUBLETAP_REQ_V01_TAP_DUR_MIN    0

/**
 * Generalized "WHO AM I" Request V01
 *
 * Defines the request structure for the SNS_DAF_GENERAL_WHO_AM_I_V01 message
 *
 * Note: This should be generic enough for all drivers to support. If a
 *       particular device does not have a "WHO AM I" register, then the
 *       response should contain "-1" in all of the appropriate fields.
 */
typedef PACK(struct) sns_daf_general_who_am_i_req_v01
{
  // Empty message structure
} sns_daf_general_who_am_i_req_v01;

/**
 * Generalized "WHO AM I" Response V01
 *
 * Defines the response structure for the SNS_DAF_GENERAL_WHO_AM_I_V01 message
 *
 * Note: This should be generic enough for all drivers to support. If a
 *       particular device does not have a "WHO AM I" register, then the
 *       response should contain "-1" in all of the appropriate fields.
 */
typedef PACK(struct) sns_daf_general_who_am_i_resp_v01
{
  uint32_t hardware_id;
  /**
   * Hardware Identifier (aka Hardware Revision)
   *
   * This is the value read out from the WHO_AM_I register, if it exists.
   * If no WHO_AM_I register exists, this field should be set to 0xFFFFFFFF.
   */
  uint32_t firmware_id;
  /**
   * Firmware Identifier (aka Firmware Revision)
   *
   * This is the ID/revision of the device's firmware, if it exists.
   * If no firmware ID exists, this field should be set to 0xFFFFFFFF.
   */
} sns_daf_general_who_am_i_resp_v01;

#define SNS_DAF_GENERAL_WHO_AM_I_NO_ID 0xFFFFFFFF

/**
 * Generalized Echo Request V01
 *
 * Defines the request structure for the SNS_DAF_GENERAL_ECHO_V01 message
 *
 * Note: All drivers should be able to support this request.
 */
typedef PACK(struct) sns_daf_general_echo_req_v01
{
  uint32_t echo;
  /**
   * Echo
   *
   * This is an arbitrary value set by the requester, to be echoed back.
   */
} sns_daf_general_echo_req_v01;

/**
 * Generalized Echo Response V01
 *
 * Defines the response structure for the SNS_DAF_GENERAL_ECHO_V01 message
 *
 * Note: All drivers should be able to support this request.
 */
typedef PACK(struct) sns_daf_general_echo_resp_v01
{
  uint32_t echo;
  /**
   * Echo
   *
   * This is the echo of the arbitrary value set by the requester.
   */
} sns_daf_general_echo_resp_v01;


/**
 * Generalized Reverb Start Request V01
 *
 * Defines the request structure for the SNS_DAF_GENERAL_REVERB_START_V01 message
 *
 * Note: All drivers should be able to support this request.
 */
typedef PACK(struct) sns_daf_general_reverb_start_req_v01
{
  uint32_t echo;
  /**
   * Echo
   *
   * This is an arbitrary value set by the requester, to be echoed back.
   */

  uint32_t reverb_period;
  /**
   * Reverb Period (in us)
   *
   * The amount of time (in us) in between reverb indications. The minimum
   * period is determined by SNS_DAF_GENERAL_REVERB_START_REQ_V01_REVERB_PERIOD_MIN
   */
} sns_daf_general_reverb_start_req_v01;

/**
 * Generalized Reverb Start Response V01
 *
 * Defines the response structure for the SNS_DAF_GENERAL_REVERB_START_V01 message
 *
 * Note: All drivers should be able to support this request.
 */
typedef PACK(struct) sns_daf_general_reverb_start_resp_v01
{
  uint32_t echo;
  /**
   * Echo
   *
   * This is the echo of the arbitrary value set by the requester.
   */
} sns_daf_general_reverb_start_resp_v01;

/**
 * Generalized Reverb Indication V01
 *
 * Defines the indication structure for the SNS_DAF_GENERAL_REVERB_IND_V01 message
 *
 * Note: All drivers should be able to support this request.
 */
typedef PACK(struct) sns_daf_general_reverb_ind_v01
{
  uint32_t echo;
  /**
   * Echo
   *
   * This is the echo of the arbitrary value set by the requester.
   */
} sns_daf_general_reverb_ind_v01;

/**
 * Generalized Reverb Start Request v01 Maximums and Minimums (inclusive)
 */
#define SNS_DAF_GENERAL_REVERB_START_REQ_V01_REVERB_PERIOD_MIN     100000  // 100000 us (10 Hz reverb)


/**
 * Generalized Reverb Stop Request V01
 *
 * Defines the request structure for the SNS_DAF_GENERAL_REVERB_STOP_V01 message
 *
 * Note: All drivers should be able to support this request.
 */
typedef PACK(struct) sns_daf_general_reverb_stop_req_v01
{
  // Empty message
} sns_daf_general_reverb_stop_req_v01;

/**
 * Generalized Reverb Stop Response V01
 *
 * Defines the response structure for the SNS_DAF_GENERAL_REVERB_STOP_V01 message
 *
 * Note: All drivers should be able to support this request.
 */
typedef PACK(struct) sns_daf_general_reverb_stop_resp_v01
{
  // Empty message
} sns_daf_general_reverb_stop_resp_v01;

#endif /* DRIVER_ACCESS_FRAMEWORK_H_ */
