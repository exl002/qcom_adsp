#===============================================================================
#
# DEVCONFIG SHARED OBJECT FOR GUESTOS
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2012 by Qualcomm Technologies Incorporated.
# All Rights Reserved.
# Qualcomm Confidential and Proprietary
#
#.......\adsp_proc\build\ms>build.cmd core_libs BUILD_ID=AAAAAAAA BUILD_VER=0002 USES_FLAGS=USES_DYN_DEVCFG,DEVCFG_SHARED_OBJ --filter=core/dal/config/dynamic_cfg
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/core.adsp/2.2/dal/config/dynamic_cfg/build/dyn_devconfig.scons#1 $
#  $DateTime: 2013/07/16 18:03:05 $
#  $Author: coresvc $
#  $Change: 4109159 $
#                      EDIT HISTORY FOR FILE
#                      
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#  
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 05/06/09   aa      Create
#
#===============================================================================
Import('env')
import os, glob
env = env.Clone()

#-------------------------------------------------------------------------------
# Load dal config builders
#-------------------------------------------------------------------------------
env.Tool('dalconfig_builder', toolpath = ['${BUILD_ROOT}/core/dal/config/build/.'])
env.Tool('devcfgHwInfo_builder', toolpath = ['${BUILD_ROOT}/core/dal/config/build/.'])

#-------------------------------------------------------------------------------
# Source PATH
#-------------------------------------------------------------------------------
SRCPATH = "${DAL_ROOT}/config/dynamic_cfg"

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0) 

#-------------------------------------------------------------------------------
# External paths, NOTE: DALConfig is a special case as it may require any
# ".h" file which may not be a public API
#-------------------------------------------------------------------------------

EXTERNAL_API = [
   'MODEM_PMIC',                  #pm.h
   'MODEM_API',
]
env.RequireExternalApi(EXTERNAL_API)

#-------------------------------------------------------------------------------
# Internal depends within CoreBSP
#-------------------------------------------------------------------------------
CBSP_API = [
   'DAL',
   'HAL',
   'BUSES',
   'HWENGINES',
   'SYSTEMDRIVERS',
   'SYSTEMDRIVERS_DALCONFIG',
   'DEBUGTOOLS',
   'SERVICES',
   'APTTESTS',
   'KERNEL_MEMORYMANAGER',
   'KERNEL'
]

env.RequirePublicApi(CBSP_API)
env.RequireRestrictedApi(CBSP_API)

#-------------------------------------------------------------------------------
# Sources, libraries
#-------------------------------------------------------------------------------    
#import pdb;pdb.set_trace()
if env.GetUsesFlag('USES_DYN_DEVCFG') is True :
   # Provide info about dalsystem_modem xml files to the build system
   DEVCFG_OBJ = ['DEVCFG_SHARED_OBJ']
   env.Replace(DEVCONFIG_ASSOC_FLAG = 'DEVCFG_SHARED_OBJ')
   devcfg_xml_tag_list = env.get('DEVCFG_XML_TAGS')
   devcfg_xml_config_dict = {}
   devcfg_c_config_dict = {}
   xml_files = []
   c_files = []
   for xml_tag in devcfg_xml_tag_list :
      if 'PLATFORM' not in xml_tag :
         msmid = xml_tag.replace('_xml', '')
         config_path = env.RealPath("${DAL_ROOT}/config/dynamic_cfg/xml/")
         # return immediate directrory
         config_dir_list = os.walk(config_path).next()[1]
         for config_dir in config_dir_list :
            if msmid in config_dir:
               config_path = config_path + "/" + config_dir + "/"
               xml_files = env.GlobFiles(config_path + '*.xml')
               c_files = env.GlobFiles(config_path + '*.c')
               break;
         if(len(xml_files) == 0):
            config_path = env.RealPath("${DAL_ROOT}/config/dynamic_cfg/xml/default/")
            xml_files = env.GlobFiles(config_path + '*.xml')
            c_files = env.GlobFiles(config_path + '*.c')
         devcfg_xml_config_dict.setdefault(xml_tag, xml_files)
         devcfg_c_config_dict.setdefault(xml_tag, c_files)   
   
   #import pdb;pdb.set_trace()
   env.AddDevCfgInfo(DEVCFG_OBJ, devcfg_xml_config_dict)
   
   # Rules for dal config c files
   # Create the master xml files
   DALConfig_out = {}
   # Generate the master xml files for only those tags that have been used in the build
   # passed through to the build system using AddDevCfgInfo. Ignore the unused tafs in 
   # image_cfg.xml     
   devcfg_xml_tag_list = env.get('DEVCFG_XML_TAGS')
   # Create one master xml file per tag
   for tag in devcfg_xml_tag_list:
      appendstr = tag.replace('_xml', '')
      devcfg_gen_xml = '${BUILDPATH}/DevCfg_master_' + appendstr + '.xml'
      devcfg_gen_cfile = '${BUILDPATH}/DevCfg_master_' + appendstr + '.c'
      DALConfig_out[tag] = env.DevcfgBuilder([devcfg_gen_xml, devcfg_gen_cfile] , None, CONFIG=[tag])
      
   # Create a dictionary with the following format: {'8026_PLATFORM_OEM_xml': {'DALConfig_8026_PLATFORM_OEM': '8026_PLATFORM_OEM_data'}
   dal_gen_src_dict = {}
   for word in devcfg_xml_tag_list:
      dal_gen_src_dict[word] = {('${BUILDPATH}/DALConfig_' + word.replace('_xml', '')) : ('${BUILDPATH}/' + word.replace('_xml', '_data'))}
   
   # Create DalConfig file
   DALConfig_src = []
   include_path = ['${BUILD_ROOT}/core/api/dal'] 
   for xml_tag, dalconfig_files_dict in dal_gen_src_dict.items():
      if 'PLATFORM' not in xml_tag :
         devcfg_gen_so = ['${BUILDPATH}/' + xml_tag + '/DevCfg_guestos.so']
         for config_file, data_file in dalconfig_files_dict.items():
            DALConfig_src = env.DALConfigSrcBuilder([config_file+'.c', data_file+'.c'], [DALConfig_out[xml_tag][0], DALConfig_out[xml_tag][1]], CONFIG="")
            DALConfig_so = env.AddDevCfgSharedObj(DEVCFG_OBJ, include_path, devcfg_gen_so, DALConfig_src + devcfg_c_config_dict[xml_tag])
            DALConfigInstalled_so = env.InstallAs('${DAL_ROOT}/config/dynamic_cfg/obj/' + xml_tag + '/DevCfg_guestos.so' , DALConfig_so)
            env.AddArtifact(DEVCFG_OBJ, DALConfigInstalled_so)