#===============================================================================
#
# DAL CONFIG Lib
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2009-2010 by Qualcomm Incorporated.
# All Rights Reserved.
# Qualcomm Confidential and Proprietary
#
#-------------------------------------------------------------------------------
#
#  $Header: //source/qcom/qct/core/pkg/adsp/dev/mrohera.Q02_1/adsp_proc/core/dal/config/build/SConscript#1 $
#  $DateTime: 2012/07/03 18:02:09 $
#  $Author: coresvc $
#  $Change: 2559645 $
#                      EDIT HISTORY FOR FILE
#                      
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#  
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 01/25/11   sho     Restore TZ for 8660 and 8960
# 01/11/11   sho     Removed TZOS_IMAGE
# 12/07/10   sc      Added APPS_PROC in check for 8960
# 12/02/10   sc      Added check for 8960 to use the correct modem/dsp dir
# 10/25/10   sc      Added KERNEL_MEMORYMANAGER
# 09/23/10   sc      Added SBL1_BOOT_IMAGE
# 09/20/10   vk      Added support for NOR_TOOLS_IMAGE
# 07/13/10   sc      Added support for RPM_IMAGE
# 07/08/10   sc      Updated with CORE_SPS and CORE_RPM
# 04/20/10   sho     Added TZOS_IMAGE
# 03/24/10   wd      Added dependencies to have SCons rebuild when needed.
# 05/06/09   wd      Create
#
#===============================================================================
Import('env')
import os, glob
env = env.Clone()

#-------------------------------------------------------------------------------
# Load dal config builders
#-------------------------------------------------------------------------------
env.Tool('dalconfig_builder', toolpath = ['.'])
env.Tool('devcfgHwInfo_builder', toolpath = ['.'])
env.Tool('devcfg_lcs_builder', toolpath = ['${BUILD_ROOT}/core/bsp/build/scripts/.'])

#-------------------------------------------------------------------------------
# Source PATH
#-------------------------------------------------------------------------------
SRCPATH = "${DAL_ROOT}/config/"

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0) 

#-------------------------------------------------------------------------------
# External paths, NOTE: DALConfig is a special case as it may require any
# ".h" file which may not be a public API
#-------------------------------------------------------------------------------

EXTERNAL_API = [
   'MODEM_PMIC',                  #pm.h
   'MODEM_API',
]
env.RequireExternalApi(EXTERNAL_API)

#-------------------------------------------------------------------------------
# Internal depends within CoreBSP
#-------------------------------------------------------------------------------
CBSP_API = [
   'DAL',
   'HAL',
   'BUSES',
   'HWENGINES',
   'SYSTEMDRIVERS',
   'SYSTEMDRIVERS_DALCONFIG',
   'DEBUGTOOLS',
   'SERVICES',
   'APTTESTS',
   'KERNEL_MEMORYMANAGER',
   'KERNEL'
]

#-------------------------------------------------------------------------------
# External dependency on platform
#-------------------------------------------------------------------------------
if 'USES_PLATFORM_FS' in env:
   PLATFORM_API = [
      'DLW',
      'HAPSDK',
      'PLATFORM_LIBS',
      'STDDEF',
      'APPS_STD',
      'QAIC',
      'UTILS',
   ]
   env.RequirePublicApi(PLATFORM_API, area='platform')

env.PublishPrivateApi('DAL_CONFIGPATH', [
   "${INC_ROOT}/core/dal/drivers/InterruptController/inc",
   "${INC_ROOT}/core/dal/drivers/InterruptController/src",
   "${INC_ROOT}/core/dal/drivers/InterruptController/src/qurt",
])

env.RequirePublicApi(CBSP_API)
env.RequireRestrictedApi(CBSP_API)

IMAGES = ['SINGLE_IMAGE', 'CBSP_SINGLE_IMAGE', 'MODEM_IMAGE', 'CBSP_MODEM_IMAGE',
         'APPS_IMAGE', 'CBSP_APPS_IMAGE', 'QDSP6_SW_IMAGE', 'CBSP_QDSP6_SW_IMAGE']

#-------------------------------------------------------------------------------
# Sources, libraries
#-------------------------------------------------------------------------------    
if env.GetUsesFlag('USES_DEVCFG') is True:
   # Provide info about dalsystem_modem xml files to the build system
   DEVCFG_IMG = ['DAL_DEVCFG_IMG']
   env.AddDevCfgInfo(DEVCFG_IMG,
   {
   '8974_xml' : ['${BUILD_ROOT}/core/dal/config/modem/dalsystem_modem_8974.xml'],
   '8x10_xml' : ['${BUILD_ROOT}/core/dal/config/modem/dalsystem_modem_8x10.xml'],
   '8x26_xml' : ['${BUILD_ROOT}/core/dal/config/modem/dalsystem_modem_8x26.xml'],
   '9x25_xml' : ['${BUILD_ROOT}/core/dal/config/modem/dalsystem_modem_9x25.xml'],
   '8092_xml' : ['${BUILD_ROOT}/core/dal/config/modem/dalsystem_modem_8092.xml'],
   '8094_xml' : ['${BUILD_ROOT}/core/dal/config/modem/dalsystem_modem_8094.xml'],
   '8084_xml' : ['${BUILD_ROOT}/core/dal/config/modem/dalsystem_modem_8084.xml'],
   '9x35_xml' : ['${BUILD_ROOT}/core/dal/config/modem/dalsystem_modem_9x35.xml'],
   '8962_xml' : ['${BUILD_ROOT}/core/dal/config/modem/dalsystem_modem_8962.xml']   
   })
   
   # Rules for dal config c files
   if 'DAL_DEVCFG_IMG' in env:
      # Create the master xml files
      DALConfig_out = {}
      DALConfig_cfile = {}
      # Generate the master xml files for only those tags that have been used in the build
      # passed through to the build system using AddDevCfgInfo. Ignore the unused tafs in 
      # image_cfg.xml
      #devcfg_xml_tag_list = env.get('DEVCFG_ENV_USED_XML_TAGS')
      
      devcfg_xml_tag_list = env.get('DEVCFG_XML_TAGS')
      # Create one master xml file per tag
      for tag in devcfg_xml_tag_list:
         appendstr = tag.replace('_xml', '')
         devcfg_gen_xml = '${BUILDPATH}/DevCfg_master_' + appendstr + '.xml'
         devcfg_gen_cfile = '${BUILDPATH}/DevCfg_master_' + appendstr + '.c'
         DALConfig_out[tag] = env.DevcfgBuilder([devcfg_gen_xml, devcfg_gen_cfile] , None, CONFIG=[tag])
      
      # Create a dictionary with the following format: {'8026_PLATFORM_OEM_xml': {'DALConfig_8026_PLATFORM_OEM': '8026_PLATFORM_OEM_data'}
      dal_gen_src_dict = {}
      for word in devcfg_xml_tag_list:
         dal_gen_src_dict[word] = {('${BUILDPATH}/DALConfig_' + word.replace('_xml', '')) : ('${BUILDPATH}/' + word.replace('_xml', '_data'))}
      
      # Create DalConfig file
      dalconfig_libs = []
      # DALConfig & data file generation
      DALConfig_src = []
      for xml_tag, dalconfig_files_dict in dal_gen_src_dict.items():
         if env.GetUsesFlag('USES_DEVCFG_MULTIPLE_CONFIG') is False:
            appendstr = ""
         else :
            appendstr = xml_tag
         for config_file, data_file in dalconfig_files_dict.items():
            DALConfig_src = env.DALConfigSrcBuilder([config_file+'.c', data_file+'.c'], [DALConfig_out[xml_tag][0], DALConfig_out[xml_tag][1]], CONFIG=appendstr)
            dalconfig_libname = '${BUILDPATH}/' + 'DALConfig_' + xml_tag
            env.AddLibrary(DEVCFG_IMG, dalconfig_libname, DALConfig_src[0])
            dalconfig_libs.append(dalconfig_libname)
            # Devcfg data file object
            DEVCFG_DATA_SOURCE =  [DALConfig_src[1]]
            devcfg_data_obj = env.Object(DEVCFG_DATA_SOURCE)
            env.AddObjsToImage(DEVCFG_IMG, devcfg_data_obj)      
   else:
      # Dev Config Source Code
      DEVCFG_SOURCES =  [
         '${BUILDPATH}/src/guestos/DALProps.c',
         '${BUILDPATH}/src/guestos/DALSysInt.c',
      ]

      # Create DALModDir file
      dal_gen_src = ['${BUILDPATH}/DALModDir_modem']
      
      # Devcfg master xml file
      devcfg_gen_xml = '${BUILDPATH}/DevCfg_master.xml'
      devcfg_gen_cfile = '${BUILDPATH}/DevCfg_master.c'
      devcfg_xml_tag_list = env.get('DEVCFG_XML_TAGS')
      DALConfig_out = env.DevcfgBuilder([devcfg_gen_xml, devcfg_gen_cfile], None, CONFIG=devcfg_xml_tag_list)
      
      # FIX ME
      DALModDir_src = env.DALModDirSrcBuilder(dal_gen_src, [DALConfig_out])
      #DALModDir_src = env.DALModDirSrcBuilder(dal_gen_src, devcfg_xml_tag_list)
      DEVCFG_SOURCES.extend(DALModDir_src)
      env.AddLibrary(IMAGES, '${BUILDPATH}/DALConfig', DEVCFG_SOURCES)

      # DAL pad src file : Add only which is required.
      DEVCFG_PAD_SOURCE = []
      for tag in devcfg_xml_tag_list :
        section_asm_file = "${BUILDPATH}/devcfg_pad_" + tag.replace('_xml', '') + ".S"
        DEVCFG_PAD_SOURCE.append(section_asm_file)
      Devcfg_pad_src_out = env.DevcfgSectionInfoBuilder(DEVCFG_PAD_SOURCE, DALConfig_out)
      env.AddObject(IMAGES, Devcfg_pad_src_out)
      
      # Register as static library for DL
      if 'USES_PLATFORM_FS' in env:
         env.PLRegister("DevCfgDyn")
         DEVCFG_DYN_SOURCES =  [
            '${BUILDPATH}/src/guestos/DevCfgDyn.c'
         ]
         env.AddLibrary(IMAGES, '${BUILDPATH}/DevCfgDyn', DEVCFG_DYN_SOURCES)
      
      dal_ddi_src = ['${INC_ROOT}/core/api/systemdrivers/DDIChipInfo.h', 
                     '${INC_ROOT}/core/api/systemdrivers/PlatformInfoDefs.h']
      dal_ddi_file = ['${DAL_ROOT}/config/inc/DevCfgSegInfo.h']
      DevCfgSegInfo_src = env.DevcfgPropInfoBuilder(dal_ddi_file, dal_ddi_src)
