#===============================================================================
#
# adsppm build script
#
# GENERAL DESCRIPTION
#    Builds the adsppm libraries for all target.
#
# Copyright (c) 2009-2011 by Qualcomm Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary and Confidential
#
#-------------------------------------------------------------------------------
#
#  $Header:  $
#  $DateTime: 2012/04/25 18:02:15 $
#  $Author: alisonc $
#  $Change: 2000534 $
#
#===============================================================================
import glob, os
import fnmatch
import itertools
import subprocess

Import('env')
env = env.Clone()
#env.Append(CCFLAGS = " -O0")

#-------------------------------------------------------------------------------
# Source PATH
#-------------------------------------------------------------------------------
SRCPATH = os.path.join("..","src")
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

THERMAL_SRCPATH = os.path.join("..","thermal")
TST_SRCPATH = os.path.join("..","test_src")

#-------------------------------------------------------------------------------
# CleanPack (Remove) all remaining files for adsppm unit test case
#-------------------------------------------------------------------------------
PACK_OUT = env.FindFiles(['*.h', '*.c', '*.s'], TST_SRCPATH)
env.CleanPack(['CORE_QDSP6_SW'], PACK_OUT)

#-------------------------------------------------------------------------------
# Internal depends within CoreBSP
#-------------------------------------------------------------------------------
CBSP_API = [
   'DAL',
   'BUSES',
   'DEBUGTOOLS',
   'DEBUGTRACE',
   'MPROC',
   'POWER',
   'SERVICES',
   'SYSTEMDRIVERS',
   'KERNEL', #needs to be last also contains wrong comdef.h
]

env.RequirePublicApi(CBSP_API)
env.RequireRestrictedApi(CBSP_API)
env.RequireProtectedApi(['POWER_UTILS'])

env.RequirePublicApi(['TMD'], area='QMIMSGS')

env.PublishPrivateApi('ADSPPM', [
   '${BUILD_ROOT}/core/power/adsppm/inc',   
   '${BUILD_ROOT}/core/power/adsppm/src',
   '${BUILD_ROOT}/core/power/adsppm/src/api/inc',
   '${BUILD_ROOT}/core/power/adsppm/src/api/src',
   '${BUILD_ROOT}/core/power/adsppm/src/asic/inc',
   '${BUILD_ROOT}/core/power/adsppm/src/asic/src',
   '${BUILD_ROOT}/core/power/adsppm/src/core/inc',
   '${BUILD_ROOT}/core/power/adsppm/src/core/src',
   '${BUILD_ROOT}/core/power/adsppm/src/hal/inc',
   '${BUILD_ROOT}/core/power/adsppm/src/hal/src',
   '${BUILD_ROOT}/core/power/adsppm/mpd_src',
   '${BUILD_ROOT}/core/power/adsppm/thermal',  
   '${BUILD_ROOT}/core/power/adsppm/src/test_src',
   ]
)

#-------------------------------------------------------------------------------
# QDSS Tracer definitions
#-------------------------------------------------------------------------------
if 'USES_QDSS_SWE' in env:
   QDSS_IMG = ['QDSS_EN_IMG']
   EVENTS = [['ADSPPM_CLK_SET','clk set,clkId=%d reqfreq=%d grantedfreq=%d'], 
           ['ADSPPM_CLK_ENABLE', 'clk enable, clkid=%d'],
           ['ADSPPM_CLK_DISABLE', 'clk disable, clkid=%d'],
           ['ADSPPM_PWR_REQ', 'PWR Req, pwrDomain=%d'],
           ['ADSPPM_PWR_REL', 'PWR Rel, pwrDomain=%d'],
           ['ADSPPM_BW_REQ', 'BW req, master=%d, slave=%d, ib=%d, ab=%d'],
           ['ADSPPM_BW_REL', 'BW rel, mater=%d, slave=%d'],
           ['ADSPPM_DCG_ENABLE', 'DCG enable, clkId=%d'],
           ['ADSPPM_DCG_DISABLE', 'DCG disable, clkId=%d'],
           ['ADSPPM_LPASS_CORE_PWR', 'LPASS CORE POWER=%d'],
           ['ADSPPM_XPU_PROG', 'XPU prog=%d'],
           ['ADSPPM_MEM_PWR', 'MEMpower,memId=%d,power=%d'], 
           ['ADSPPM_API_PWR_REQ', 'APIPower Req, clientId=%d'],
           ['ADSPPM_API_PWR_REL', 'APIPower Rel, clientId=%d'],
           ['ADSPPM_API_MIPS_REQ', 'APIMIPS req, clientId=%d, mipstotal=%d, mipsfloor=%d, codelocation=%d, reqoperation=%d'],
           ['ADSPPM_API_MIPS_REL', 'APIMIPS Rel clientId=%d'],
           ['ADSPPM_API_REG_REQ', 'APIReg Request, clientId=%d, master=%d, slave=%d'],
           ['ADSPPM_API_REG_REL', 'APIReg Release, clientId=%d'],
           ['ADSPPM_API_BW_REQ', 'APIBW Request, clientId =%d master=%d, slave=%d, BW=%d, percentage=%d'],
           ['ADSPPM_API_BW_REL', 'APIBW Release, clientId=%d'],
           ['ADSPPM_API_LATENCY_REQ', 'APILatency Request, clientId=%d, latency=%dus'],
           ['ADSPPM_API_LATENCY_REL', 'APILatency Release, clientId=%d'],
           ['ADSPPM_API_MEM_PWR_REQ', 'APIMEMPower Request, clientId=%d memId=%d, power=%d'],
           ['ADSPPM_API_MEM_PWR_REL', 'APIMEMPower Release, clientId=%d'],
           ]

   env.AddSWEInfo(QDSS_IMG, EVENTS)


# Map adsppm's diag message to the sleep category.
#-------------------------------------------------------------------------------
# Sources
#-------------------------------------------------------------------------------

MPD_ADSPPM_SNS_USER_SRC = [
    '${BUILD_ROOT}/core/power/adsppm/mpd_src/qdi_client.c'
]

MPD_ADSPPM_AUD_USER_SRC = [
    '${BUILD_ROOT}/core/power/adsppm/mpd_src/qdi_client.c'
]

MPD_ADSPPM_GUESTOS_SRC = [
    '${BUILD_ROOT}/core/power/adsppm/mpd_src/qdi_srv.c',
    '${BUILD_ROOT}/core/power/adsppm/mpd_src/adsppmcb.c'
]

source_patterns = ['*.c', '*.cpp']
sources = []

for root, dirnames, filenames in os.walk(SRCPATH):
    matches = itertools.chain(*[fnmatch.filter(filenames, pattern) for pattern in source_patterns])
    matches = [os.path.join(root, filename) for filename in matches]
    sources.extend(matches) 

thermal_sources = []

for root, dirnames, filenames in os.walk(THERMAL_SRCPATH):
    matches = itertools.chain(*[fnmatch.filter(filenames, pattern) for pattern in source_patterns])
    matches = [os.path.join(root, filename) for filename in matches]
    thermal_sources.extend(matches) 

test_sources = []

for root, dirnames, filenames in os.walk(TST_SRCPATH):
    matches = itertools.chain(*[fnmatch.filter(filenames, pattern) for pattern in source_patterns])
    matches = [os.path.join(root, filename) for filename in matches]
    test_sources.extend(matches) 
	
sources.extend(thermal_sources)
#sources.extend(test_sources)

#-------------------------------------------------------------------------------    
# Add Libraries to image
#-------------------------------------------------------------------------------
if 'USES_CORESLEEP_TOOL' in env:

    # Right now keep separate LPRs for 9x25 only and everything else
    # will use from 8974 directory. This is to keep up with binary 
    # compatibilty requirement in a hacky way for 8974 and 8x26. If other
    # target comes up add extra elif's.
    xml_dir = ''
    if env['MSM_ID'] in ['9x25']:
        xml_dir = env['BUILD_ROOT'] + '/core/power/adsppm/src/hal/src/'
    else:
        xml_dir = env['BUILD_ROOT'] + '/core/power/adsppm/src/hal/src/'

    #env.AddCoreSleepLPR('CORE_QDSP6_SW', {'sleep_lpr_xml' : xml_dir})


if 'USES_SENSOR_IMG' in env:
    # Library for the sensors user process
    RCINIT_IMG = ['CORE_QDSP6_SENSOR_SW']
    env.AddObject(RCINIT_IMG,[MPD_ADSPPM_SNS_USER_SRC])
    env.AddRCInitFunc(              
        RCINIT_IMG,                       
        {
              'sequence_group' : 'RCINIT_GROUP_7',                       # required
              'init_name'      : 'adsppm_client',                        # required
              'init_function'  : 'MMPM_Init_Ext',                        # required
              'dependencies'   : ['clk_regime','dalsys','npa','icbarb','sleep','smem_log']
         })
elif 'USES_AUDIO_IMG' in env:
    # Library in audio process
    RCINIT_IMG = ['CORE_QDSP6_AUDIO_SW']
    #env.AddObject(RCINIT_IMG,[MPD_ADSPPM_AUD_USER_SRC])
    #env.AddLibrary(RCINIT_IMG,'${BUILDPATH}/adsppm',[MPD_ADSPPM_AUD_USER_SRC])
    env.AddRCInitFunc(              
        RCINIT_IMG,                       
        {
              'sequence_group' : 'RCINIT_GROUP_7',                       # required
              'init_name'      : 'adsppm_client',                        # required
              'init_function'  : 'MMPM_Init_Ext',                        # required
              'dependencies'   : ['clk_regime','dalsys','npa','icbarb','sleep','smem_log']
         })
else:
    #if 'USES_QURTOS_IMG' in env:
    # Image built for Guest OS
    RCINIT_IMG = ['CORE_QDSP6_SW']
    if 'USES_MPD' in env:
        #mpd_adsppm_guestos_obj = env.Object(MPD_ADSPPM_GUESTOS_SRC)
        env.AddObject(RCINIT_IMG,[MPD_ADSPPM_GUESTOS_SRC])
        sources.extend([MPD_ADSPPM_GUESTOS_SRC])
    env.AddLibrary(RCINIT_IMG,'${BUILDPATH}/adsppm',sources)
    env.AddRCInitFunc(              
         RCINIT_IMG,                       
         {
              'sequence_group' : 'RCINIT_GROUP_7',                       # required
              'init_name'      : 'adsppm',                               # required
              'init_function'  : 'MMPM_Init_Ext',                        # required
              'dependencies'   : ['clk_regime','dalsys','npa','icbarb','sleep','smem_log', 'rpm']
         })
    if 'USES_MPD' in env:
        env.AddRCInitFunc(              
            RCINIT_IMG,                       
            {
                  'sequence_group' : 'RCINIT_GROUP_7',                       # required
                  'init_name'      : 'adsppm_qdi',                               # required
                  'init_function'  : 'QDI_adsppm_init',                        # required
                  'dependencies'   : ['clk_regime','dalsys','npa','icbarb','sleep','smem_log', 'adsppm']
             })
    env.AddRCInitTask(
       RCINIT_IMG,
        {
            'sequence_group'             : 'RCINIT_GROUP_7',    # required
            'thread_name'                : 'adsppm_asyncmgr',    # required
            'thread_entry'               : 'AM_WorkLoopThread',
            'thread_type'                : 'RCINIT_TASK_QURTTASK',
            'stack_size_bytes'           : '4096',
            'priority_amss_order'        : 'SHARED_DRIVER_SERVICE_PRI_ORDER',
            'cpu_affinity'               : 'REX_ANY_SMT_MASK',
            'dependencies'               : ['clk_regime','dalsys','npa','icbarb','sleep','smem_log', 'adsppm']
            })
    env.AddRCInitTask(
       RCINIT_IMG,
        {
                'sequence_group'             : 'RCINIT_GROUP_7',    # required
                'thread_name'                : 'adsppm_cb',    # required
                'thread_entry'               : 'AM_callBackThread',
                'thread_type'                : 'RCINIT_TASK_QURTTASK',
                'stack_size_bytes'           : '4096',
                'priority_amss_order'        : 'SHARED_DRIVER_SERVICE_PRI_ORDER',
                'cpu_affinity'               : 'REX_ANY_SMT_MASK',
                'dependencies'               : ['clk_regime','dalsys','npa','icbarb','sleep','smem_log', 'adsppm']
                })
    env.AddRCInitTask(
       RCINIT_IMG,
        {
                'sequence_group'             : 'RCINIT_GROUP_7',    # required
                'thread_name'                : 'adsppm_thermal',    # required
                'thread_entry'               : 'adsppm_therm_qmi_init',
                'thread_type'                : 'RCINIT_TASK_QURTTASK',
                'stack_size_bytes'           : '4096',
                'priority_amss_order'        : 'SHARED_DRIVER_SERVICE_PRI_ORDER',
                'cpu_affinity'               : 'REX_ANY_SMT_MASK',
                'dependencies'               : ['clk_regime','dalsys','npa','icbarb','sleep','smem_log','qmi_fw','adsppm']
                })
    #env.AddRCInitTask(
    #   RCINIT_IMG,
    #    {
    #            'sequence_group'             : 'RCINIT_GROUP_7',    # required
    #            'thread_name'                : 'adsppm_test',    # required
    #            'thread_entry'               : 'adsppmtest_main',
    #            'thread_type'                : 'RCINIT_TASK_QURTTASK',
    #            'stack_size_bytes'           : '4096',
    #            'priority_amss_order'        : 'SHARED_DRIVER_SERVICE_PRI_ORDER',
    #            'cpu_affinity'               : 'REX_ANY_SMT_MASK',
    #            'dependencies'               : ['clk_regime','dalsys','npa','icbarb','sleep','smem_log', 'adsppm']
    #            })        

  
#-------------------------------------------------------------------------------
# Device Configuration Sources
#-------------------------------------------------------------------------------
if 'USES_DEVCFG' in env:
   DEVCFG_IMG = ['DAL_DEVCFG_IMG']
   env.AddDevCfgInfo(DEVCFG_IMG, 
   {
      '8974_xml' : ['${BUILD_ROOT}/core/power/adsppm/config/8974/adsppm_8974.xml',
                    '${BUILD_ROOT}/core/power/adsppm/config/8974/adsppm_configdata_8974.c'],
	  '8994_xml' : ['${BUILD_ROOT}/core/power/adsppm/config/8994/adsppm_8994.xml',
                    '${BUILD_ROOT}/core/power/adsppm/config/8994/adsppm_configdata_8994.c'],
      '8x26_xml' : ['${BUILD_ROOT}/core/power/adsppm/config/8x26/adsppm_8x26.xml',
                    '${BUILD_ROOT}/core/power/adsppm/config/8x26/adsppm_configdata_8x26.c'], 
      '8x10_xml' : ['${BUILD_ROOT}/core/power/adsppm/config/8x10/adsppm_8x10.xml',
                    '${BUILD_ROOT}/core/power/adsppm/config/8x10/adsppm_configdata_8x10.c'],
      '9x25_xml' : ['${BUILD_ROOT}/core/power/adsppm/config/9x25/adsppm_9x25.xml',
                    '${BUILD_ROOT}/core/power/adsppm/config/9x25/adsppm_configdata_9x25.c'],
      '8962_xml' : ['${BUILD_ROOT}/core/power/adsppm/config/8962/adsppm_8962.xml',
                    '${BUILD_ROOT}/core/power/adsppm/config/8962/adsppm_configdata_8962.c'], 
      '8084_xml' : ['${BUILD_ROOT}/core/power/adsppm/config/8084/adsppm_8084.xml',
                    '${BUILD_ROOT}/core/power/adsppm/config/8084/adsppm_configdata_8084.c'],
      '9x35_xml' : ['${BUILD_ROOT}/core/power/adsppm/config/9x35/adsppm_9x35.xml',
                    '${BUILD_ROOT}/core/power/adsppm/config/9x35/adsppm_configdata_9x35.c']					
   })
