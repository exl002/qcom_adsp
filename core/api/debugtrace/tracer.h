#ifndef TRACER_H
#define TRACER_H
/** =========================================================================
  @file tracer.h
  @brief QUALCOMM Debug Subsystem (QDSS) Tracer utility library

               Copyright (c) 2011-2012 Qualcomm Technologies Incorporated.
               All rights reserved.
               Qualcomm Confidential and Proprietary
===========================================================================*/
/* $Header: //components/rel/core.adsp/2.2/api/debugtrace/tracer.h#1 $ */

/*---------------------------------------------------------------------------
 * Include Files
 * ------------------------------------------------------------------------*/

#include "comdef.h"
#include "tracer_entity.h"

/*---------------------------------------------------------------------------
 * Preprocessor Definitions and Constants
 * ------------------------------------------------------------------------*/
/**
  @brief Return values for a tracer API call.
 */
typedef enum
{
   TRACER_RETURN_SUCCESS = 0,   /**< Complete successfully. */
   TRACER_RETURN_ERROR = 1      /**< Incomplete; failed; error occurred. */

} tracer_return_enum_t;

/**
  @brief Tracer options.

  Bit mask of tracer options available which maps to STM
  options. Combined options for both data and flag STP packets.
 */
#define TRACER_OPT_NONE          0x00  /**< No options. */
#define TRACER_OPT_TIMESTAMP     0x01  /**< Include timestamp. */
#define TRACER_OPT_GUARANTEE     0x02  /**< Guarantee delivery. */

/*---------------------------------------------------------------------------
 * Type Declarations
 * ------------------------------------------------------------------------*/
/**
  @brief Tracer options (values: TRACER_OPT_...)
 */
typedef uint8 tracer_options_t;

/**
  @brief Data structure for managing registered clients.
 */
typedef struct tracer_node_s tracer_client_t;

/**
  @brief Handle for registered clients.
 */

// need be volatile or not? ....
typedef tracer_client_t * volatile tracer_client_handle_t;

/**
  @brief Tracer TDS fields for registered client.

  Sizes correspond to TDS header fields.
 */
typedef uint8 tracer_cpu_id_t;      /**< CPU Id as used by TDS. */
typedef uint8 tracer_process_id_t;  /**< Process Id as used by TDS. */
typedef uint16 tracer_thread_id_t;  /**< Thread Id as used by TDS. */

/**
  @brief Tracer software events ids (autogenerated enum).
 */
typedef enum tracer_event_id_enum tracer_event_id_t;

/*---------------------------------------------------------------------------
 * Function Declarations and Documentation
 * ------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------*/
/**
  @brief Change the owner associated with the client handle.

  The thread ID associated with the client handle is changed to the value
  specified. The client should ensure the value does not conflict
  with another thread id on the procesor. Relevant only if client is
  registered as a TDS entity (typically the default).

  @param hClient [in]: The client's handle obtained when registered.
  @param owner_id [in]: Identifier to associate with the client handle.

  @return None.
 */
void tracer_set_owner(tracer_client_handle_t hClient,
                      tracer_thread_id_t owner_id);

/*-------------------------------------------------------------------------*/
/**
  @brief Register with tracer and obtain a handle to use QDSS tracer.

  Caller registers as a trace source (tracer SW client) to obtain a
  client handle for use when submitting trace data.

  The client specifies the data encapsulation mode employed through the
  entity ID (eid). Mode will be used for all trace output.

    - When the entity is TDS a TDS stream is generated which is a TDS
       packet with OST base framing. This is the default.
    - When the entity is the client itself, an independent data
       stream is generated. This stream consists of the client's trace
       data with OST base framing. The TDS protocol is bypassed. This is
       a special case for 3rd party or legacy clients when required.
    - When the entity is 0 (zero), a raw data stream is
       generated which is the client's trace data is placed directly into
       the STP trace output stream. Both the TDS and OST base/framing
       protocols are bypassed. This is a special case for 3rd party and
       possibly legacy clients.

  Memory to manage the client is allocated and initialized. This includes
  obtaining a STM port handle and for TDS, obtaining the source identity
  information: CPU id, process ID, and thread id. Both the eid and pid
  specified are conveyed in the OST header.

  The client is added to the list of registered clients.

  If the Tracer has not been initialized, the tracer will be initialized
  first.

  @see tracer_unregister

  @param phClient [in, out]: Location where the allocated client handle
         is placed. Valid on TRACER_RETURN_SUCCESS; NULL on
         TRACER_RETURN_ERROR.
  @param eid [in]: The entity ID for the encapsulation mode. IDs are
         defined in tracer_entity.h
         - For tracer data stream mode use TDS as the entity. Also the
         default (TRACER_ENTITY_DEFAULT).
         - For independent mode use your uniquely defined ID.
         - For raw mode, use TRACER_ENTITY_NONE.
  @param pid [in]: The protocol ID of the entity (eid). Not
              applicable if eid is zero.

  @return TRACER_RETURN_SUCCESS : Client successfully registered.
  @return TRACER_RETURN_ERROR   : Client has not been registered. Possible
  causes are failure to obtain a STM port or assign a client record.
 */
tracer_return_enum_t tracer_register(tracer_client_handle_t *phClient,
                                     tracer_ost_entity_id_enum_t eid,
                                     tracer_ost_protocol_id_t pid);

/*-------------------------------------------------------------------------*/
/**
  @brief Removes a registered client from using QDSS tracer library.

  All memory allocations and obtained resources for this client are cleared
  and freed.

  Once freed, resources may be reused by another client.

  @see tracer_register
  @param phClient [in]: Pointer to the client's handle.
  @param phClient [out]: Client's handle set to NULL.
  @return None.
 */
void tracer_unregister(tracer_client_handle_t *phClient);

/*-------------------------------------------------------------------------*/
/**
  @brief Send trace data to the QDSS trace output stream.

  Client requests to send data into the trace output stream with
  the specified options. The trace data is encapsulated based on
  the mode selected when the Client registered with Tracer. Ultimately,
  the data is sent to STM whereby STP formatted packets are output at the
  QDSS trace sink(s).

  The trace data is typically a text string or a binary data block.

  Data may be silently discarded if tracer is not initialized, tracer
  output is disabled, or output for the client's associated entity is
  disabled.


  @param hClient [in]: The client's handle obtained when registered.
  @param options [in]: Options for delivery of trace data.
         (guaranteed and/or timestamped; see TRACER_OPT_...).
  @param uData_len [in]: Number of bytes to placed in the trace output stream.
         When zero, will treat *pData is pointing to a printf type format
         string.
  @param *pData [in]: When uData_len is non-zero, pData is the starting
         (logical) address of the uData_len bytes of trace data to be placed
         in the trace output stream.
         When uData_len is zero, pData is a pointer to a printf type format
         string and the variable argument must match the count of format
         specifiers in the format string.
  @param ... [in]: Parameters for when pData is a format string. Number of
         variable arguments must match the count of format specifiers in
         format string.

  @return TRACER_RETURN_SUCCESS : Successfully completed.
  @return TRACER_RETURN_ERROR   : Failed to complete. Likely invalid
            client handle provided or data length too long.
 */

tracer_return_enum_t tracer_data(tracer_client_handle_t hClient,
                                 tracer_options_t options,
                                 uint32 uData_len,
                                 const char *pData,
                                 ...);

/*-------------------------------------------------------------------------*/
/**
  @brief Issue a sw event indication from registered clients into the
  QDSS trace output stream.

  Client request to send a sw event indication containing a
  event id into the trace output stream. All software events are
  timestamped and not guaranteed.

  Event id values are dynamically assigned during the build. An event
  table is generated which maps the value with a descriptor of the event.

  Request may be silently discarded if trace is not initialized,
  tracer output is disabled, output of client's associated entity
  is disabled, or output of the event id is disabled.

  @param hClient [in]: The client's handle obtained from registration.
  @param event_id [in]: Value identifying the sw event.

  @return TRACER_RETURN_SUCCESS : Successful.
  @return TRACER_RETURN_ERROR   : Invalid handle.
 */
tracer_return_enum_t tracer_event(tracer_client_handle_t hClient,
                                  tracer_event_id_t event_id);

/*-------------------------------------------------------------------------*/
/**
  @brief Issue a "simple" sw event indication into the QDSS trace
  output stream.

  Client request to send a sw event indication containing a
  event id into the trace output stream. All software events are
  timestamped and not guaranteed.

  A simple sw event request does not require a client handle. As such,
  the trace may occur on any one of several trace output channels that
  were allocated by tracer.

  Event id values are dynamically assigned during the build. An event
  table is generated which maps the value with a descriptor of the event.

  The request may be silently discarded if tracer is not intialized,
  tracer port manager is not initialized, tracer output is disabled,
  or output of the event id is disabled.

  @param event_id [in]: Value identifying the sw event.

  @return None.
 */
void tracer_event_simple(tracer_event_id_t event_id);

/*-------------------------------------------------------------------------*/
/**
  @brief Send a "simple" sw event with data to the QDSS trace output
  stream.

  Client requests to send a sw event with associated parameters into the
  trace output stream. The event id and parameters are encapsulated
  into an independent data stream from the SWEVT entity. All parameters
  must be of uint32 data type.

  Event id values are dynamically assigned during the build. An event
  table is generated which maps the value with a descriptor of the event.

  This request does not require a client handle. As such, the trace
  may occur on any one of several trace output channels that were
  allocated by tracer.

  The request may be silently discarded if tracer is not intialized,
  tracer port manager is not initialized, tracer output is disabled,
  or output of the event id is disabled.

  @param event_id [in]: Value identifying the sw event.
  @param num_args [in]: Number of parameters to placed in the trace
         output stream.
  @param ... [in]: Parameters values of type uint32. There must be
         num_args number of variable arguments.
  @return None.
 */
void tracer_event_simple_vargs(tracer_event_id_t event_id,
                               uint32 num_args,
                               ...);

#endif /* #ifndef TRACER_H */

