#=============================================================================
# TLMM LIBRARY
#
# Target:    All
# Processor: All
#
#=============================================================================
# $Header: //source/qcom/qct/core/systemdrivers/clock/main/latest/build/SConscript#5 $
#=============================================================================
#  Copyright 2011 Qualcomm Technologies Incorporated.
#  All Rights Reserved.
#  QUALCOMM Proprietary/GTDR
#=============================================================================

import os

Import('env')
env = env.Clone()

#------------------------------------------------------------------------------
# Add API folders
#------------------------------------------------------------------------------

if os.path.isfile(env['BUILD_ROOT'] + '/core/systemdrivers/tlmm/config/' + env['CHIPSET'] + '/TLMMChipset.xml') :
  env.PublishPrivateApi("SYSTEMDRIVERS_TLMM", [
     "${INC_ROOT}/core/systemdrivers/tlmm/inc",
     "${INC_ROOT}/core/api/systemdrivers/hwio/${CHIPSET}",
     "${INC_ROOT}/core/systemdrivers/tlmm/config/${CHIPSET}"
  ])
else:
  env.PublishPrivateApi("SYSTEMDRIVERS_TLMM", [
     "${INC_ROOT}/core/systemdrivers/tlmm/inc",
     "${INC_ROOT}/core/api/systemdrivers/hwio/${CHIPSET}",
     "${INC_ROOT}/core/systemdrivers/tlmm/config/stub"
  ])

SRCPATH = "../"
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0) 
SRCPATHSCRIPTS = env['BUILD_ROOT'] + '/core/systemdrivers/tlmm/scripts/'

#-------------------------------------------------------------------------------
# Internal depends within CoreBSP
#-------------------------------------------------------------------------------

env.Append(CPPPATH = [
   "${INC_ROOT}/core/systemdrivers/tlmm/src",
   "${INC_ROOT}/core/systemdrivers/tlmm/config",
   "${INC_ROOT}/core/systemdrivers/tlmm/hw/v1"
])


#-------------------------------------------------------------------------------
# Internal depends within CoreBSP
#-------------------------------------------------------------------------------
CBSP_API = [
   'HAL',
   'SERVICES',
   'SYSTEMDRIVERS',
   'DAL',

   # needs to be last also contains wrong comdef.h
   'KERNEL',
]

env.RequirePublicApi(CBSP_API)
env.RequireRestrictedApi(CBSP_API)


#-------------------------------------------------------------------------------
# Sources, libraries
#-------------------------------------------------------------------------------


HAL_TLMM_V1_SOURCES =  [
   '${BUILDPATH}/hw/v1/HALtlmm.c'
]


haltlmm_v1_obj = env.Object(HAL_TLMM_V1_SOURCES)
haltlmm_v1_lib = env.Library('${BUILDPATH}/HALtlmmV1', haltlmm_v1_obj)



TLMM_COMMON_SOURCES =  [
   '${BUILDPATH}/src/DALTLMMFwk.c',
   '${BUILDPATH}/src/DALTLMMInfo.c',
   '${BUILDPATH}/src/DALTLMM.c',
   '${BUILDPATH}/src/DALTLMMState.c'
]


daltlmm_obj = env.Object(TLMM_COMMON_SOURCES)
daltlmm_lib = env.Library('${BUILDPATH}/DALtlmm', daltlmm_obj)


#-------------------------------------------------------------------------------
# Add Libraries to image
#-------------------------------------------------------------------------------

env.AddLibsToImage(['MODEM_IMAGE',     'CBSP_MODEM_IMAGE', 
                    'OSBL_BOOT_IMAGE', 'SBL3_BOOT_IMAGE',
                    'CBSP_WCN_IMAGE',  'WCN_IMAGE',
                    'CORE_WCN',        'CORE_SPS',
                    'SINGLE_IMAGE',    'CBSP_SINGLE_IMAGE',
                    'QDSP6_SW_IMAGE',  'CBSP_QDSP6_SW_IMAGE',
                    'APPS_IMAGE',      'CBSP_APPS_IMAGE',
                    'CORE_GSS',        'TLMM_BOOT_DRIVER'], [daltlmm_lib, haltlmm_v1_lib])


#---------------------------------------------------------------------------
# Invoke document generation SConscript
#---------------------------------------------------------------------------

if os.path.exists(env['BUILD_ROOT'] + '/core/api/systemdrivers/docsrc/tlmm/SConscript') :
  env.SConscript(
    '${BUILD_ROOT}/core/api/systemdrivers/docsrc/tlmm/SConscript',
    exports='env')


#---------------------------------------------------------------------------
# Add DAL XML file
#---------------------------------------------------------------------------

if 'USES_DEVCFG' in env:
   DEVCFG_IMG = ['DAL_DEVCFG_IMG']
   env.AddDevCfgInfo(DEVCFG_IMG, 
   {
      '8974_xml' : ['${BUILD_ROOT}/core/systemdrivers/tlmm/config/msm8974/TLMMChipset.xml'],
	  '8994_xml' : ['${BUILD_ROOT}/core/systemdrivers/tlmm/config/msm8994/TLMMChipset.xml'],
      '8x26_xml' : ['${BUILD_ROOT}/core/systemdrivers/tlmm/config/msm8x26/TLMMChipset.xml'],
      '8x26_PLATFORM_MTP_MSM_xml' : ['${BUILD_ROOT}/core/systemdrivers/tlmm/config/msm8x26/PlatformIO_MTP.xml'],
      '8x26_PLATFORM_CDP_xml' : ['${BUILD_ROOT}/core/systemdrivers/tlmm/config/msm8x26/PlatformIO_CDP.xml'],
      '8x26_PLATFORM_QRD_xml' : ['${BUILD_ROOT}/core/systemdrivers/tlmm/config/msm8x26/PlatformIO_QRD.xml'],
      '8x10_xml' : ['${BUILD_ROOT}/core/systemdrivers/tlmm/config/msm8x10/TLMMChipset.xml'],
      '8x10_PLATFORM_CDP_xml' : ['${BUILD_ROOT}/core/systemdrivers/tlmm/config/msm8x10/PlatformIO_CDP.xml'],
      '8x10_PLATFORM_MT_MSM_xml' : ['${BUILD_ROOT}/core/systemdrivers/tlmm/config/msm8x10/PlatformIO_MTP.xml'],
      '8x10_xml' : ['${BUILD_ROOT}/core/systemdrivers/tlmm/config/msm8x10/TLMMChipset.xml'],
      '9x25_xml' : ['${BUILD_ROOT}/core/systemdrivers/tlmm/config/mdm9x25/TLMMChipset.xml'],
      '8092_xml' : ['${BUILD_ROOT}/core/systemdrivers/tlmm/config/msm8974/TLMMChipset.xml'],
      '9x35_xml' : ['${BUILD_ROOT}/core/systemdrivers/tlmm/config/mdm9x25/TLMMChipset.xml'],
      '8084_xml' : ['${BUILD_ROOT}/core/systemdrivers/tlmm/config/msm8974/TLMMChipset.xml'],
      '8962_xml' : ['${BUILD_ROOT}/core/systemdrivers/tlmm/config/msm8974/TLMMChipset.xml']	  	  
   })



#-------------------------------------------------------------------------------
# Add CMM Scripts to T32 Menu
#-------------------------------------------------------------------------------

CMM_ARGUMENT = ''

try:
    env.AddCMMScripts ('ADSP', [SRCPATHSCRIPTS], { 'tlmm_gpio_hw.cmm' : ['TLMM', CMM_ARGUMENT] }, 'SystemDrivers')
except:
  pass

