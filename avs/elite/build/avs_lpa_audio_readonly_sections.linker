/*LPA audio read only sections. This include audio code and read-only data*/
/*OCMEM segments have a requirement that both the starting address and size be aligned to 4096 bytes*/
/* align the start address to 4096 bytes*/
. = ALIGN (4096);
/* function MCPS > 0.01*/
    *(*audio_code_start)
    *(*audpp_volume_apply_gain*)	  	  
    *(*MtMx_GainAndAccOnEqualNumChannels*)
    *(*MxAr_ProcessBufQ*)
    *(*afe_port_accumulate_client_samples*)
    *(*afe_port_render_pcm_samples*)
    *(*HAL_afe_ReadInterruptStatus*)
    *(*AFEWrite*)
    *(*afe_slimbus_write*)
    *(*afe_port_get_client_samples_and_add*)
    *(*afeDalInterruptHandler*)
    *(*afe_svc_thread_pool_work_loop*)
    *(*afe_port_get_buf_from_client_queue*)
    *(*HAL_afe_ClearInterrupts*)
    *(*topo_process*)
    *(*audio_if_write*)
    *(*AudPP_DataProc_DataBufFormatProc*)
    *(*AudPP_TryGetOutputBuffer*)
/* function MCPS < 0.01 > 0.0001*/	  
    *(*afe_port_update_avt_drift*)
    *(*SignalDmaInterrupt*)
    *(*Interleave_16*)
    *(*afe_calc_avt_drift_for_audio_if_port*)
    *(*AudPP_WorkLoop*)
    *(*ReadRegister1*)
    *(*UpdateRegister)	  
    *(*afe_port_render_pcm_samples_thread_safe*)
    *(*AfeOsalCacheCommand*)
    *(*MtMxWorkLoop*)
    *(*MtMx_FillInPortLocalBuf*)
    *(*afe_port_interleave_samples*)
    *(*HAL_afe_GetCurrAddr*)
    *(*dalDmaPeriodInterruptCallBack*)
    *(*topo_convert_to_appibuf*)
    *(*AudPP_deliverCurrentOutputBuffer*)
    *(*MxAr_ApplyGainAndAccumulateSamples*)
    *(*topo_loop_thru_zero_modules*)
    *(*AudPP_DataProc_DataBufFormatProcSetUp*)
    *(*UpdateRegister1*)
    *(*MtMx_ApplyGainAndAccumulateInputToOutput*)
    *(*MtMx_ProcessDataQ*)
    *(*elite_msg_convt_buf_node_to_msg*)
    *(*MtMx_OutPortToCheckForPendingEOS*)
    *(*MxAr_CommonInPortProcessingRoutine*)
    *(*AudPP_PackChannelData*)
    *(*MtMx_InPortToHonorTimestamp*)
    *(*AudioDecSvc_ProcessOutputDataQ*)
    *(*AudioDecSvc_ProcessOutputDataQ_PCMPlayback*)
    *(*AudPP_DataProc_ProcessNewPacket*)
    *(*AudPP_FreeCurrentInputBuffer*)
    *(*afe_port_return_buf_to_q*)
    *(*MtMx_MsgDataBuffer*)
    *(*CSpectrumAnalyzerLib::reset*)
/*  Misc */
    *(*AudioDecSvc_UpdateNextOutbufTS)
    *(*afe_port_multiply_saturate)	
    *(*GetSoftVolumeParam*)
    *(*appi_gain_process*)
    *(*appi_softvolumecontrols_process*)	  
    *(*afeDalHandleDmaPeriodInterrupt*)
    *(*AfeOsalInterruptControllerDone)
    *(*DeInterleave_Multich_16)
    *(*elite_msg_push_payload_to_returnq)
    *(*elite_msg_return_payload_buffer)
    *(*HAL_afe_GetSupportedSampleSizes)
    *(*HAL_afe_GetWpscntError)
    *(*HAL_afe_GetSampleCount)
    *(*mt_mx_init_pass_thru_outport_buf)
    *(*MxAr_ProcessPendingPushOutPorts)
    *(*MxAt_ApplyGainAndAccumulateSamples)
    *(*MtMx_CheckIfPassThruOutportNeedsReinit*)
    *(*DalSlimBus_GetBamIOVec*)
    *(*SlimBus_GetBamIOVec*)
    *(*DalSps_GetIOVec*)
    *(*SlimBus_LockDevice*)
    *(*DALSYS_SyncEnter*)
    *(*SlimBus_UnlockDevice*)
    *(*DALSYS_SyncLeave*)
    *(*DalSlimBus_SubmitBamTransfer*)
    *(*SlimBus_SubmitBamTransfer*)
    *(*DalSps_TransferOne*)
    *(*DALSYS_EventCtrlEx*)
    *(*qurt_elite_memorymap_cache_flush*)
    *(*qurt_mem_cache_clean*)
	
/* assembly code: resampler, limiter, interleaver*/
    Interleaver_asm* (*text)
    CMultiStageIIR* (*text)
    iir_tdf2_16* (*text)
    iir_tdf2_asm* (*text)
    CMBDRCLib* (*text)
    CDrcLib* (*text)
    CLimiter24Lib* (*text*)
    GenericResamplerLib24SRC* (*text*)	

/* library code*/	  
    memmove* (.text)
    memset* (.text)
    memcpy* (.text)
    fmemcpy* (.text)
    qmemory_asm* (.text)

/* AAC codec : code */	
    AacDecoderModule* (.text*)	 
    ffr_add_MantExp.* (.text)
    fft32.* (.text)	  
    *(*DSP_fft32x32s)	  
    *(*ffr_divide_MantExp)
    *(*ffr_divide16)
    *(*ffr_sqrt_MantExp)
    *(*shuffle)
   
/* MP3 codec : code */	
    Mp3DecoderModule* (.text*)	

/* MP3 24-bit code.*/	
    HpMp3DecoderModule* (.text*)	
	
/* make size to be multiple of 4096 bytes*/
. = ALIGN (4096);	
    *(*audio_code_end)
