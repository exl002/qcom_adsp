#===============================================================================
#
# CoreBSP Preprocessor cleaner
#
# GENERAL DESCRIPTION
#    celans junk generated by preprocessor
#
# Copyright (c) 2009-2010 by Qualcomm Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: //source/qcom/qct/images/scons/qc/rel/1.0/tools/build/scons/scripts/ppasm.py#1 $
#  $DateTime: 2012/05/14 14:00:23 $
#  $Author: cbirch $
#  $Change: 2419468 $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 05/01/10   wd      Create
#
#===============================================================================
import os
import re
import sys
from optparse import OptionParser

#------------------------------------------------------------------------------
# Parse command line arguments
#------------------------------------------------------------------------------
def parse_args():
   usage = "usage: %prog [options]"
   version = "%prog 1.0"
   
   parser = OptionParser(usage=usage, version=version)
   parser.add_option("-f", "--ppfile", dest="pp_filename",
                  help="Read preprocess data from FILE", metavar="FILE")
   parser.add_option("-o", "--outfile", dest="output_filename",
                  help="Write output to FILE", metavar="FILE")
          
   (options, args) = parser.parse_args()
   
   if options.pp_filename is None:
      parser.error("-f option must be defined")
      sys.exit(2)
                  
                  
   return (options, args)
   
#------------------------------------------------------------------------------
# main
#------------------------------------------------------------------------------
def main():
   # get args from cmd line
   (options, args) = parse_args()
   
   file = open(options.pp_filename, 'r')
   data = file.readlines()
   file.close()
   
   if options.output_filename is None:
      file = sys.stdout
   else:
      file = open(options.output_filename, 'w')
   
   re_bad_line = re.compile('(^\s*#line.*$)|(^\s*#\s\d.*$)|(^\s*$)')
   
   for line in data:
      if re_bad_line.match(line) is None:
         file.write(line)

   file.close()
   
main()